# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
default:
  tags:
    - docker

variables:
  K8S_API_URL: https://172.16.196.2:6443

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - cleanup
  - push
  - deploy

.build_docker_image:
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: "/certs"
  services:
  - name: docker:20.10-dind
  image: docker:20.10.14
  tags:
    - docker
  script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  - docker build 
      --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} .
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  
docker:build:
  stage: build
  extends: .build_docker_image
  variables:
    DOCKER_HOST: ""
    DOCKER_TLS_CERTDIR: "/certs"
  tags:
  - docker
  script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  - docker build 
      --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} 
      --tag ${CI_REGISTRY_IMAGE}:latest .

test:docker-compose:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  #services:
  #- name: docker:20.10-dind
  image: docker/compose:alpine-1.29.2

  script:
    - docker-compose up -d
    - sleep 20
    - chmod +x check.sh
    - /bin/sh check.sh

  
cleanup:docker-compose:   # This job runs in the test stage.
  stage: cleanup    # It only starts when the job in the build stage completes successfully.
  #services:
  #- name: docker:20.10-dind
  image: docker/compose:alpine-1.29.2
  script:
    - docker-compose down -v
    #Удаляем с ранера старые образы нашего приложения
    - docker images gitlab.s056568.edu.slurm.io:5050/s056568/application:* --format "{{.ID}}" |  tail -n +3 | xargs docker rmi -f


docker:push: 
  stage: push
  extends: .build_docker_image
  variables:
    DOCKER_HOST: ""
    DOCKER_TLS_CERTDIR: "/certs"
  tags:
  - docker
  script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  only:
    - main


deploy:
  stage: deploy
  image: centosadmin/kubernetes-helm:3.1.2
  environment:
    name: production
  script:
    - kubectl config set-cluster k8s --insecure-skip-tls-verify=true --server=$K8S_API_URL
    - kubectl config set-credentials ci --token=$K8S_CI_TOKEN
    - kubectl config set-context ci --cluster=k8s --user=ci
    - kubectl config use-context ci
    - helm upgrade --install $CI_PROJECT_PATH_SLUG .helm
        --set image=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
        --set imageTag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --wait
        --timeout 300s
        --atomic
        --debug
        --namespace $CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_NAME
  only:
    - main

